import { useState } from "react";
import "./App.css";
import { TabType } from "./types";
import { useDebug } from "./hooks/useDebug";
import { GPTStreamingPage } from "./pages/GPTStreamingPage";
import { APIBackendTestPage } from "./pages/APIBackendTestPage";
import { MCPIntegrationPage } from "./pages/MCPIntegrationPage";
import { TwoStepTestPage } from "./pages/TwoStepTestPage";

export default function App() {
  const [activeTab, setActiveTab] = useState<TabType>("interface-backend");
  const [apiKey, setApiKey] = useState("");
  const [githubToken, setGithubToken] = useState("");
  
  const { debugLogs, showDebugPanel, addDebugLog, clearDebugLogs, toggleDebugPanel } = useDebug();

  const renderTabContent = () => {
    switch (activeTab) {
      case "gpt":
        return <GPTStreamingPage apiKey={apiKey} addDebugLog={addDebugLog} />;
      case "interface-backend":
        return <APIBackendTestPage addDebugLog={addDebugLog} githubToken={githubToken} />;
      case "1step":
        return <MCPIntegrationPage apiKey={apiKey} addDebugLog={addDebugLog} />;
      case "2step":
        return <TwoStepTestPage apiKey={apiKey} addDebugLog={addDebugLog} githubToken={githubToken} />;
      default:
        return <APIBackendTestPage addDebugLog={addDebugLog} githubToken={githubToken} />;
    }
  };

  return (
    <div className="App">
      {/* ?ㅻ뜑 */}
      <header className="header">
        <h1>MCP Integration System</h1>
        <div className="header-controls">
          <div className="api-key-inputs">
            <input
              type="password"
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              placeholder="OpenAI API Key"
              className="header-api-input"
            />
            <input
              type="password"
              value={githubToken}
              onChange={(e) => setGithubToken(e.target.value)}
              placeholder="GitHub Token"
              className="header-api-input"
            />
          </div>
          <button 
            className="debug-toggle-button"
            onClick={toggleDebugPanel}
          >
            {showDebugPanel ? "?붾쾭洹??④린湲? : "?붾쾭洹?蹂닿린"}
          </button>
        </div>
      </header>

      {/* ???ㅻ퉬寃뚯씠??*/}
      <div className="tab-navigation">
        <button
          className={`tab-button ${activeTab === "gpt" ? "active" : ""}`}
          onClick={() => setActiveTab("gpt")}
        >
          1. GPT ?ㅽ듃由щ컢
        </button>
        <button
          className={`tab-button ${activeTab === "interface-backend" ? "active" : ""}`}
          onClick={() => setActiveTab("interface-backend")}
        >
          2. API 諛깆뿏???뚯뒪??        </button>
        <button
          className={`tab-button ${activeTab === "1step" ? "active" : ""}`}
          onClick={() => setActiveTab("1step")}
        >
          3. MCP ?듯빀
        </button>
        <button
          className={`tab-button ${activeTab === "2step" ? "active" : ""}`}
          onClick={() => setActiveTab("2step")}
        >
          4. 2 STEP ?뚯뒪??        </button>
      </div>

      {/* 硫붿씤 肄섑뀗痢??곸뿭 */}
      <div className="main-content">
        {renderTabContent()}
      </div>

      {/* ?붾쾭洹??⑤꼸 */}
      {showDebugPanel && (
        <div className="debug-panel">
          <div className="debug-header">
            <h3>?붾쾭洹?濡쒓렇</h3>
            <button onClick={clearDebugLogs}>濡쒓렇 吏?곌린</button>
          </div>
          <div className="debug-logs">
            {debugLogs.map((log, index) => (
              <div key={index} className="debug-log">
                {log}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
} 

